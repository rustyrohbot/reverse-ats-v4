package templates

import (
	"reverse-ats/internal/db"
	"fmt"
)

templ ContactFormNew(companies []db.Company) {
	@Layout("New Contact") {
		@contactFormFields(nil, companies, false)
	}
}

templ ContactFormEdit(contact db.Contact, companies []db.Company) {
	@Layout("Edit Contact") {
		@contactFormFields(&contact, companies, true)
	}
}

templ contactFormFields(contact *db.Contact, companies []db.Company, isEdit bool) {
	<div class="max-w-2xl mx-auto">
		<div class="mb-6">
			<h1 class="text-2xl font-semibold text-gray-900">
				if isEdit {
					Edit Contact
				} else {
					New Contact
				}
			</h1>
		</div>
		<form
			if isEdit {
				hx-put={ fmt.Sprintf("/contacts/%d", contact.ContactID) }
			} else {
				hx-post="/contacts"
			}
			hx-target="body"
			class="space-y-6 bg-white shadow-sm rounded-lg p-6"
		>
			<div>
				<label for="company_id" class="block text-sm font-medium text-gray-700">Company *</label>
				<select
					id="company_id"
					name="company_id"
					required
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				>
					<option value="">Select a company</option>
					for _, company := range companies {
						<option
							value={ fmt.Sprintf("%d", company.CompanyID) }
							if contact != nil && contact.CompanyID == company.CompanyID {
								selected
							}
						>
							{ company.Name }
						</option>
					}
				</select>
			</div>
			<div class="grid grid-cols-2 gap-4">
				<div>
					<label for="first_name" class="block text-sm font-medium text-gray-700">First Name *</label>
					<input
						type="text"
						id="first_name"
						name="first_name"
						required
						if contact != nil {
							value={ contact.FirstName }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
				<div>
					<label for="last_name" class="block text-sm font-medium text-gray-700">Last Name *</label>
					<input
						type="text"
						id="last_name"
						name="last_name"
						required
						if contact != nil {
							value={ contact.LastName }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
			</div>
			<div>
				<label for="role" class="block text-sm font-medium text-gray-700">Role/Title</label>
				<input
					type="text"
					id="role"
					name="role"
					if contact != nil && contact.Role.Valid {
						value={ contact.Role.String }
					}
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				/>
			</div>
			<div class="grid grid-cols-2 gap-4">
				<div>
					<label for="email" class="block text-sm font-medium text-gray-700">Email</label>
					<input
						type="email"
						id="email"
						name="email"
						if contact != nil && contact.Email.Valid {
							value={ contact.Email.String }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
				<div>
					<label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
					<input
						type="tel"
						id="phone"
						name="phone"
						if contact != nil && contact.Phone.Valid {
							value={ contact.Phone.String }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
			</div>
			<div>
				<label for="linkedin" class="block text-sm font-medium text-gray-700">LinkedIn</label>
				<input
					type="url"
					id="linkedin"
					name="linkedin"
					if contact != nil && contact.Linkedin.Valid {
						value={ contact.Linkedin.String }
					}
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				/>
			</div>
			<div>
				<label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
				<textarea
					id="notes"
					name="notes"
					rows="3"
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				>
					if contact != nil && contact.Notes.Valid {
						{ contact.Notes.String }
					}
				</textarea>
			</div>
			<div class="flex justify-end space-x-3">
				<a href="/contacts" class="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">
					Cancel
				</a>
				<button type="submit" class="rounded-md bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500">
					if isEdit {
						Update Contact
					} else {
						Create Contact
					}
				</button>
			</div>
		</form>
	</div>
}
