package templates

import (
	"reverse-ats/internal/db"
	"fmt"
)

templ InterviewFormNew(roles []db.ListRolesWithCompanyRow) {
	@Layout("New Interview") {
		@interviewFormFields(nil, roles, false)
	}
}

templ InterviewFormEdit(interview db.Interview, roles []db.ListRolesWithCompanyRow) {
	@Layout("Edit Interview") {
		@interviewFormFields(&interview, roles, true)
	}
}

templ interviewFormFields(interview *db.Interview, roles []db.ListRolesWithCompanyRow, isEdit bool) {
	<div class="max-w-2xl mx-auto">
		<div class="mb-6">
			<h1 class="text-2xl font-semibold text-gray-900">
				if isEdit {
					Edit Interview
				} else {
					New Interview
				}
			</h1>
		</div>
		<form
			if isEdit {
				hx-put={ fmt.Sprintf("/interviews/%d", interview.InterviewID) }
			} else {
				hx-post="/interviews"
			}
			hx-target="body"
			class="space-y-6 bg-white shadow-sm rounded-lg p-6"
		>
			<div>
				<label for="role_id" class="block text-sm font-medium text-gray-700">Role *</label>
				<select
					id="role_id"
					name="role_id"
					required
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				>
					<option value="">Select a role</option>
					for _, role := range roles {
						<option
							value={ fmt.Sprintf("%d", role.RoleID) }
							if interview != nil && interview.RoleID == role.RoleID {
								selected
							}
						>
							{ role.CompanyName } - { role.RoleName }
						</option>
					}
				</select>
			</div>
			<div class="grid grid-cols-3 gap-4">
				<div>
					<label for="date" class="block text-sm font-medium text-gray-700">Date *</label>
					<input
						type="date"
						id="date"
						name="date"
						required
						if interview != nil {
							value={ interview.Date }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
				<div>
					<label for="start" class="block text-sm font-medium text-gray-700">Start Time *</label>
					<input
						type="time"
						id="start"
						name="start"
						required
						if interview != nil {
							value={ interview.Start }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
				<div>
					<label for="end" class="block text-sm font-medium text-gray-700">End Time *</label>
					<input
						type="time"
						id="end"
						name="end"
						required
						if interview != nil {
							value={ interview.End }
						}
						class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
					/>
				</div>
			</div>
			<div>
				<label for="type" class="block text-sm font-medium text-gray-700">Type *</label>
				<select
					id="type"
					name="type"
					required
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				>
					<option value="">Select...</option>
					<option value="RECRUITER" if interview != nil && interview.Type == "RECRUITER" { selected }>Recruiter Screen</option>
					<option value="TECH_SCREEN" if interview != nil && interview.Type == "TECH_SCREEN" { selected }>Technical Screen</option>
					<option value="MANAGER" if interview != nil && interview.Type == "MANAGER" { selected }>Manager Interview</option>
					<option value="LOOP" if interview != nil && interview.Type == "LOOP" { selected }>Interview Loop</option>
					<option value="MISC" if interview != nil && interview.Type == "MISC" { selected }>Other</option>
				</select>
			</div>
			<div>
				<label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
				<textarea
					id="notes"
					name="notes"
					rows="4"
					class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-3 py-2 border"
				>
					if interview != nil && interview.Notes.Valid {
						{ interview.Notes.String }
					}
				</textarea>
			</div>
			<div class="flex justify-end space-x-3">
				<a href="/interviews" class="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">
					Cancel
				</a>
				<button type="submit" class="rounded-md bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500">
					if isEdit {
						Update Interview
					} else {
						Create Interview
					}
				</button>
			</div>
		</form>
	</div>
}
